#!/bin/env bash
DIR=~/.turbodl
ARGS='--connect-timeout 5 --max-time 10 --retry 5 --retry-delay 0 --retry-max-time 40 -s'
if [ ! -d "$DIR" ]; then
    mkdir -p "$DIR"/movies "$DIR"/series "$DIR"/errors; cd "$DIR"
else
    cd "$DIR"
    mkdir -p movies series errors
    rm *s/* *today.txt titles.txt 2> /dev/null
fi

PARSE(){
    touch links; D=1
    while true; do
        if [ $D -gt 9 ]; then
            if grep -qiE "s$D.*(480p|720p|1080p)" <<< "$LINKS"; then
                if ! grep -qi "Season $D" links; then echo -e "<h1>Season $D</h1>" >> links; fi
                if grep -qi "s$D.*480p" <<< "$LINKS"; then
                    echo -e "\\n480p\\n$(grep -i "s$D.*480p" <<< "$LINKS")" >> links
                fi
                if grep -qi "s$D.*720p" <<< "$LINKS"; then
                    echo -e "\\n720p\\n$(grep -i "s$D.*720p" <<< "$LINKS")" >> links
                fi
                if grep -qi "s$D.*1080p" <<< "$LINKS"; then
                    echo -e "\\n1080p\\n$(grep -i "s$D.*1080p" <<< "$LINKS")" >> links
                fi
            elif grep -qi "s$D" <<< "$LINKS"; then
                if ! grep -qi "Season $D" links; then echo -e "<h1>Season $D</h1>" >> links; fi
                echo -e "\\n$(grep -i "s$D" <<< "$LINKS")" >> links
            else
                break
            fi
        else
            if grep -qiE "s0$D.*(480p|720p|1080p)" <<< "$LINKS"; then
                if ! grep -qi "Season 0$D" links; then echo -e "<h1>Season 0$D</h1>" >> links; fi
                if grep -qi "s0$D.*480p" <<< "$LINKS"; then
                    echo -e "\\n480p\\n$(grep -i "s0$D.*480p" <<< "$LINKS")" >> links
                fi
                if grep -qi "s0$D.*720p" <<< "$LINKS"; then
                    echo -e "\\n720p\\n$(grep -i "s0$D.*720p" <<< "$LINKS")" >> links
                fi
                if grep -qi "s0$D.*1080p" <<< "$LINKS"; then
                    echo -e "\\n1080p\\n$(grep -i "s0$D.*1080p" <<< "$LINKS")" >> links
                fi
            elif grep -qi "s0$D" <<< "$LINKS"; then
                if ! grep -qi "Season 0$D" links; then echo -e "<h1>Season 0$D</h1>" >> links; fi
                echo -e "\\n$(grep -i "s0$D" <<< "$LINKS")" >> links
            else
                break
            fi
        fi
        D=$((D+1))
    done
}

CROSS_CHECK(){
    WP_RESULTS=$(curl $ARGS -X GET "https://$SITE/wp-json/wp/v2/posts?search=$(sed 's/[(-)]//g; s/ /%20/g' <<< "$TITLE")&per_page=$NUM")
    while [[ "$A" != $(jq length <<< "$WP_RESULTS") ]]; do
        if grep ^"$(sed 's/ (.*)//' <<< "$TITLE")" <<< "$(jq -r ".[$A].title.rendered" <<< "$WP_RESULTS" | sed -e "s/&#8211;/-/g; s/&#8217;/'/g; s/&#038;/\&/g; s/&#8216;/'/g; s/&#822[0-1];/\"/g; s/&amp;/\&/g")"; then
            WP_LINKS=$(jq -r ".[$A].content.rendered" <<< "$WP_RESULTS" | grep -o '<a href.*</a>' || true)
            if grep -q 'http' <<< "$WP_LINKS"; then
                LINKS2=$(sed "/CLICK HERE FOR SUBTITLES/d; /target.*self.*Load more/d" <<< "$LINKS")
                if [[ $1 == s ]]; then
                    MD5="$(grep "$OUTPUT=" MD5SUM | sed 's/.*=//')"
                else
                    MD5="$(md5sum <<< "$WP_LINKS")"
                fi
                if [ "$MD5" == "$(md5sum <<< "$LINKS2")" ]; then
                    find links 2> /dev/null && rm links
                    SAME=1 && export SAME; break
                else
                    if [ "$USER" != persie ]; then
                        set +x
                        curl -s -X DELETE --user "looneytkp:Sgm4kv101413$" "https://turbodl.xyz/wp-json/wp/v2/posts/$(jq ".[$A].id" <<< "$WP_RESULTS")" 2> /dev/null
                        curl -s -X DELETE --user "looneytkp:Sgm4kv101413$" "https://turbodl.xyz/wp-json/wp/v2/media/$(jq ".[$A].featured_media" <<< "$WP_RESULTS")?force=true" 2> /dev/null
                        set -x
                    fi
                    if [[ $1 == s ]]; then
                        sed -i "s/$OUTPUT=.*/$OUTPUT=$(md5sum <<< "$LINKS2")/" MD5SUM
                    fi
                    echo "deleted $OUTPUT"
                fi
            else
                if [ "$USER" != persie ]; then
                    set +x
                    curl -s -X DELETE --user "looneytkp:Sgm4kv101413$" "https://turbodl.xyz/wp-json/wp/v2/posts/$(jq ".[$A].id" <<< "$WP_RESULTS")" 2> /dev/null
                    curl -s -X DELETE --user "looneytkp:Sgm4kv101413$" "https://turbodl.xyz/wp-json/wp/v2/media/$(jq ".[$A].featured_media" <<< "$WP_RESULTS")?force=true" 2> /dev/null
                    set -x
                fi

                if [[ $1 == s ]]; then
                    sed -i "s/$OUTPUT=.*/$OUTPUT=$(md5sum <<< "$LINKS2")/" MD5SUM
                fi
                sed -i "/$TITLE/d" $LIST
                echo "deleted $OUTPUT"
            fi
            break
        else
            A=$((A+1))
            if [ $A == $(jq length <<< "$WP_RESULTS") ]; then
                if [ $NUM == 5 ]; then
                    NUM=20; CROSS_CHECK
                else
                    echo "$OUTPUT   -->   conflicting error" >> $1'today.txt' && SAME=1 && export SAME break
                fi
            fi
        fi
    done
}

MULTI_FUNC(){
    output=$(grep ^'<a href=.*html.*title=.*</a>' <<< "$URL" | sed -e "s/'>.*//; s/.*title='//; s/<\/a>//")
    output2=$(grep ^'<a href=.*html.*title=.*</a>' <<< "$URL" | sed "s/'>.*//")
    if [ "$USER" != persie ]; then
        exec 3>&1 4>&2
        trap 'exec 2>&4 1>&3' 0 1 2 3
        exec 1>slogs.txt 2>&1
    fi
    while IFS= read -r "OUTPUT"; do
        set -xe
        echo -e "\\n$OUTPUT\\n-----------------------"
#if [ "$OUTPUT" != "The Oval" ]; then continue; fi
        if grep "$OUTPUT" blacklist; then echo "$OUTPUT blacklisted"; continue; fi
        set +xe
        SITE=$(curl $ARGS $(grep "$OUTPUT" <<< "$output2" | grep -o http.*html))
        set -xe
        LINKS=$(grep -oiE "(<span style=\"font-family.*http|<a href=).*(.*|S[0-9][0-9]E[0-9][0-9]).*(mkv|mp4|avi).*</a>" <<< "$SITE" | sed "s/.*<a/<a/; s/a>.*/a>/; s/CLICK HERE FOR SUBTITLES /Subtitles/; /Load more/d")
        grep -qiE "(hd.*cm|HDCAM|HDTS).*mkv" <<< "$LINKS" && continue
        YEAR=$(grep -woE '([0-9][0-9][0-9][0-9]$|[0-9][0-9][0-9][0-9])' <<< "$OUTPUT" || sed '0,/class=.*post-body/d; /CLICK ON.* LINK.* BELOW TO DOWNLOAD/,$d' <<< "$SITE" | grep -oE '(Release.*[0-9][0-9][0-9][0-9]|[0-9][0-9][0-9][0-9]<br />)' | grep -o '[0-9][0-9][0-9][0-9]' || echo 'null')
        grep -q 'null' <<< "$YEAR" && echo "$OUTPUT   -->   year not found" >> $1'today.txt' && continue
        NAME=$(sed -e 's/  $//; s/ $//; s/\./ /g; s/_/ /g; s/[ -.][0-9][0-9][0-9][0-9].*//; s/ ([0-9][0-9][0-9][0-9]).*//; s/ (Tv-Series)//' <<< "$OUTPUT")
        if [[ $1 == s ]]; then N='tv'; else N='movie'; fi
        TMDB_API=$(curl $ARGS -H "Accept: application/json" -H "Content-Type: application/json" "https://api.themoviedb.org/3/search/$N?api_key=0dec8436bb1b7de2bbcb1920ac31111f&query=$(sed "s/ /%20/g" <<< "$NAME")&page=1&year=$YEAR")
        if [ $(jq '.total_results' <<< "$TMDB_API") == 0 ]; then echo "$OUTPUT   -->   not found" >> $1'today.txt'; continue; fi
        if [[ $1 == s ]]; then N='first_air_date'; else N='release_date'; fi
        A=0
        while [ "$A" -lt "$(jq '.total_results' <<< $TMDB_API)" ]; do
            if grep -q "$YEAR" <<< $(jq -r ".results[$A].$N" <<< "$TMDB_API"); then
                POSTER="https://image.tmdb.org/t/p/w500$(jq -r ".results[$A] | .poster_path" <<< "$TMDB_API")"
                TMDB_ID=$(jq -r ".results[$A] | .id" <<< ""$TMDB_API"")
                OVERVIEW=$(jq -r ".results[$A] | .overview" <<< "$TMDB_API")
                break
            elif grep -q "$((YEAR+1))" <<< $(jq -r ".results[$A].$N" <<< "$TMDB_API"); then
                POSTER="https://image.tmdb.org/t/p/w500$(jq -r ".results[$A] | .poster_path" <<< "$TMDB_API")"
                TMDB_ID=$(jq -r ".results[$A] | .id" <<< ""$TMDB_API"")
                OVERVIEW=$(jq -r ".results[$A] | .overview" <<< "$TMDB_API")
                break
            else
                if [ $(jq '.total_results' <<< "$TMDB_API") == 1 ]; then
                    POSTER="https://image.tmdb.org/t/p/w500$(jq -r ".results[$A] | .poster_path" <<< "$TMDB_API")"
                    TMDB_ID=$(jq -r ".results[$A] | .id" <<< "$TMDB_API")
                    OVERVIEW=$(jq -r ".results[$A] | .overview" <<< "$TMDB_API")
                    break
                elif [ "$A" == $(jq '.total_results' <<< "$TMDB_API") ]; then
                    echo "$OUTPUT   -->   not found" >> $1'today.txt'
                    continue 2
                fi
                A=$((A+1))
            fi
        done
        A=0
        TRAILERS=$(curl $ARGS -H "Accept: application/json" -H "Content-Type: application/json" "https://api.themoviedb.org/3/$N/$TMDB_ID/videos?api_key=0dec8436bb1b7de2bbcb1920ac31111f" || exit)
        if [ "$(jq '.results | length' <<< $TRAILERS)" != '0' ]; then
            while [ $A != $(jq '.results | length' <<< "$TRAILERS") ]; do
                if [ Trailer == "$(jq -r ".results[$A].type" <<< "$TRAILERS")" ]; then
                    KEY=$(jq -r ".results[$A].key" <<< "$TRAILERS")
                    break
                elif [ $A == $(jq '.results | length' <<< "$TRAILERS") ]; then
                    unset KEY; break
                else
                    A=$((A+1)); continue
                fi
            done
        else
            unset KEY
        fi
        A=0
        if [[ $1 == s ]]; then N='show'; else N='movie'; fi
        IMDB_ID=$(curl $ARGS --header "Content-Type: application/json" --header "trakt-api-version: 2" --header "trakt-api-key: 64ba02e985f18ec3a00186209b3605cfbbeedf9890898e3a06b8e020111e8194" "https://api.trakt.tv/search/tmdb/$TMDB_ID?type=$N" | jq -r ".[0].$N.ids.imdb")
        ! grep -q 'tt' <<< "$IMDB_ID" && echo "$OUTPUT   -->   IMDB error getting data" >> $1'today.txt' && continue
        if [[ $1 == s ]]; then PARSE; fi
        OMDB_API=$(curl --connect-timeout 5 --max-time 10 --retry 5 --retry-delay 0 --retry-max-time 40 -s -H "Accept: application/json" -H "Content-Type: application/json" "http://www.omdbapi.com/?i=$IMDB_ID&plot=short&apikey=7759dbc7" || exit)
        grep "Error getting data" <<< "$OMDB_API" && echo "$OUTPUT   -->   OMDB error getting data" >> $1'today.txt' && continue
        YEAR=$(jq -r '.Year' <<< $OMDB_API); TITLE="$(jq -r ".Title" <<< "$OMDB_API") ($YEAR)"
        PLOT=$(jq -r '.Plot' <<< "$OMDB_API"); grep -q 'N/A' <<< "$PLOT" && PLOT="$OVERVIEW"
        CAST=$(jq -r '.Actors' <<< "$OMDB_API"); GENRE=$(jq -r '.Genre' <<< "$OMDB_API")
        if grep -qi 'documentary' <<< "$GENRE"; then if ! grep -q "$OUTPUT" whitelist; then continue; fi; fi
        RATING=$(jq -r '.imdbRating' <<< "$OMDB_API")
        if [ "$RATING" == 'N/A' -o "$GENRE" == 'N/A' ]; then
            if ! grep -q ^"$OUTPUT" whitelist; then
                echo "$OUTPUT   -->   rating/genre not available" >> $1'today.txt'
                continue
            else
                grep -q 'N/A' <<< "$GENRE" && GENRE=$(grep "$OUTPUT" whitelist | sed 's/.*#//')
            fi
        else
            if grep -qiE '(horror|thriller)' <<< "$GENRE"; then
                if [ $(sed 's/\.//' <<< "$RATING") -lt 52 ] && ! grep -q "$OUTPUT" whitelist; then
                    continue
                fi
            else
                if [ $(sed 's/\.//' <<< "$RATING") -lt 55 ] && ! grep -q "$OUTPUT" whitelist; then
                    continue
                fi
            fi
        fi
        if [[ $1 == s ]]; then
            touch MD5SUM
            if ! grep "$OUTPUT=" MD5SUM; then echo "$OUTPUT=$(md5sum <<< "$LINKS")" >> MD5SUM; fi
            LIST='series_list.txt'; SITE='series.turbodl.xyz'
        else
            LIST='movie_list.txt'; SITE='turbodl.xyz'
        fi
        if grep -owF "$TITLE" $LIST; then NUM=5; CROSS_CHECK $1; if [ $SAME ]; then unset SAME && continue; fi; fi
        if [[ $1 == s ]]; then FOLDER='series'; else FOLDER='movies'; fi
        curl $ARGS "$POSTER" -o "$TITLE".jpg || exit
        if [ $(identify -format "%w" "$TITLE".jpg)> /dev/null -gt 530 -o $(identify -format "%w" "$TITLE".jpg)> /dev/null -lt 470 -o $(identify -format "%h" "$TITLE".jpg)> /dev/null -gt 780 -o $(identify -format "%h" "$TITLE".jpg)> /dev/null -lt 700 ]; then
            if ! grep -q ^"$OUTPUT" whitelist; then
                rm "$TITLE".jpg
                echo "$OUTPUT   -->   invalid image height/weight dimension" >> $1'today.txt'
                continue
            fi
        else
            mv "$TITLE".jpg $FOLDER/"$TITLE".jpg
        fi
        if grep -qowF "$TITLE" $LIST; then
            echo "$TITLE   -->   updated" >> $1'today.txt'
        else
            echo "$TITLE" >> $1'today.txt' && sed -i "1s/^/$TITLE\\n/" $LIST
        fi
        if [[ $1 == s ]]; then N=$(sed 's/–/, /' <<< $YEAR); LINKS=$(cat links); else N="$YEAR"; fi
        echo "$TITLE #$OUTPUT" >> titles.txt
        if [ "$KEY" ]; then
            echo -e "<p style=\"text-align: center;\">\\n$PLOT\\n\\n<center>Trailer:<iframe src=\"https://www.youtube-nocookie.com/embed/$KEY?modestbranding=1&showinfo=0&rel=0&iv_load_policy=3&color=white&controls=0\" width=\"500\" height=\"300\" frameborder=\"0\"></iframe></centre>\\n\\nIMDB Rating: $RATING\\nCast: $CAST\\nGenre: $GENRE\\n\\nDownload Links:\\n$LINKS\\n</p>\\n\\nTags: $GENRE, $N" > $FOLDER/"$OUTPUT"
        else
            echo -e "<div style=\"text-align: center;\">\\n$PLOT\\n\\nIMDB Rating: $RATING\\nCast: $CAST\\nGenre: $GENRE\\n\\nDownload Links:\\n$LINKS\\n</div>\\n\\nTags: $GENRE, $N" > $FOLDER/"$OUTPUT"
        fi
        find links 2> /dev/null && rm links
    done <<< "$output"
    if [ ! -e $1'today.txt' ]; then echo 'null posts'; exit; fi
    sed -i "1s/^/$(date)\\n--------------------------------\\n/" $1'today.txt'
    if [ "$USER" != persie ]; then
        if [ -e titles.txt ]; then
            echo -e "\\n---sorting randomly---"
            SORTED_POSTS=$(sort -Rr < titles.txt)
            if [[ $1 == s ]]; then
                MAIL='Ahd8s7a8a9skA@turbodl.xyz'
            else
                MAIL='Ud37asAUd8a7@turbodl.xyz'
            fi
            while IFS= read -r SORTED; do
                echo | mutt -s "$(sed 's/ #.*//' <<< "$SORTED")" -i $FOLDER/"$(grep -o '#.*' <<< "$SORTED" | sed 's/#//')" -a $FOLDER/"$(sed 's/ #.*//' <<< "$SORTED")".jpg -- $MAIL
            done <<< "$SORTED_POSTS"
        fi
    fi
    echo "$(date)"
}
if [ "$USER" != persie ]; then
    cat ~/turbodl/whitelist > ~/.turbodl/whitelist
    cat ~/turbodl/blacklist > ~/.turbodl/blacklist
fi
case $1 in
    -m)
        if [ "$USER" != persie ]; then
            COUNT=1; COUNT1=0
            WP=$(curl --connect-timeout 5 --max-time 10 --retry 5 --retry-delay 0 --retry-max-time 40 -s -X GET "https://turbodl.xyz/wp-json/wp/v2/posts?page=$COUNT&per_page=100" || exit)
            while [ $COUNT1 -lt 100 ]; do
                title=$(jq -r ".[$COUNT1].title.rendered" <<< "$WP" | sed -e "s/&#8211;/-/g; s/&#8217;/'/g; s/&#038;/\&/g; s/&#8216;/'/g; s/&#822[0-1];/\"/g; s/&amp;/\&/g")
                grep -q "$title" movie_list.txt || echo "$title" >> movie_list.txt
                COUNT1=$((COUNT1+1))
            done
        fi
        URL=$(curl $ARGS "https://lightdlmovies.blogspot.com/search/label/MOVIES" || exit)
        MULTI_FUNC m
        ;;
    -s)
        if [ "$USER" != persie ]; then
            COUNT=1; COUNT1=0
            WP=$(curl --connect-timeout 5 --max-time 10 --retry 5 --retry-delay 0 --retry-max-time 40 -s -X GET "https://series.turbodl.xyz/wp-json/wp/v2/posts?page=$COUNT&per_page=100" || exit)
            while [ $COUNT1 -lt 100 ]; do
                title=$(jq -r ".[$COUNT1].title.rendered" <<< "$WP" | sed -e "s/&#8211;/-/g; s/&#8217;/'/g; s/&#038;/\&/g; s/&#8216;/'/g; s/&#822[0-1];/\"/g; s/&amp;/\&/g")
                grep -q "$title" series_list.txt || echo "$title" >> series_list.txt
                COUNT1=$((COUNT1+1))
            done
        fi
        URL=$(curl $ARGS "https://www.lightdl.xyz/search/label/TV%20SERIES" || exit)
        MULTI_FUNC s
        ;;
esac
