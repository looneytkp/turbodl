#!/bin/env bash
set -e
PARSE(){
#set +xe
    curl $ARGS --header "Content-Type: application/json" "https://eztv.io/api/get-torrents?imdb_id=$(sed 's:tt::' <<< $IMDB_ID)&limit=100" | jq . > "$JUNK/$OUTPUT.tor"
    if [ $(jq '.torrents_count' $JUNK/"$OUTPUT.tor") == 0 ]; then
        rm $JUNK/"$OUTPUT.tor"
    else
        A=0
        while [ $A != $(jq -r '.torrents | length' $JUNK/"$OUTPUT.tor") ]; do
            echo "<a href=$(jq ".torrents | .[$A].magnet_url" $JUNK/"$OUTPUT.tor")>$(jq -r ".torrents | .[$A].title" $JUNK/"$OUTPUT.tor") [torrent] (turbodl.xyz)</a> - $(($(jq -r ".torrents | .[$A].size_bytes" $JUNK/"$OUTPUT.tor") / 2**20))MB" >> test
            A=$((A+1))
        done
    fi
    exit
#    ) &
    if [ "$USER" == "$SERVER" ]; then
        while IFS= read -r "LINE"; do
            if ! grep -q 'http' <<< $LINE; then continue; fi
            SIZE=$(wget -o - -t 5 --timeout=5 --tries=3 --spider "$(grep -oE "http.*(mkv|mp4|avi)" <<< $LINE | sed -e 's/.>.*//')" | grep Length | sed 's/.*(//; s/).*//' || true)
            grep -qE "(G|M)" <<< $SIZE && echo "$LINE - $SIZE"B >> $JUNK/"$OUTPUT.links2" || echo "$LINE - N/A" >> $JUNK/"$OUTPUT.links2"
        done < $JUNK/"$OUTPUT.links"
        mv $JUNK/"$OUTPUT.links2" $JUNK/"$OUTPUT.links"
    fi
    touch $JUNK/"$OUTPUT.link"; D=1
    while true; do
        if [ $D -gt 9 ]; then TAG="s$D"; else TAG="S0$D"; fi
        if ! grep -qi "$TAG" $JUNK/"$OUTPUT.links"; then break; fi
        if ! grep -qi "Season $D" $JUNK/"$OUTPUT.link"; then echo -e "\\n<h3>Season $D</h3>" >> $JUNK/"$OUTPUT.link"; fi
        for PIXEL in "${PIXELS[@]}"; do
            grep -i "$TAG" $JUNK/"$OUTPUT.links" | grep -vE '(480|720|1080|2160)p' >> $JUNK/"$OUTPUT.link" || true
            grep -ivE "$TAG.*($PIXEL|${PIXEL}p).*(x264|x265)" $JUNK/"$OUTPUT.links" | grep -qiE "$TAG.*($PIXEL|${PIXEL}p)" && echo -e "\\n${PIXEL}p\\n$(grep -ivE "$TAG.*($PIXEL|${PIXEL}p).*(x264|x265)" $JUNK/"$OUTPUT.links" | grep -iE "$TAG.*($PIXEL|${PIXEL}p)")" >> $JUNK/"$OUTPUT.link" || true
            grep -qiE "$TAG.*($PIXEL|${PIXEL}p).*x264" $JUNK/"$OUTPUT.links" && echo -e "\\n${PIXEL}p x264\\n$(grep -iE "$TAG.*($PIXEL|${PIXEL}p).*x264" $JUNK/"$OUTPUT.links")" >> $JUNK/"$OUTPUT.link" || true
            grep -qiE "$TAG.*($PIXEL|${PIXEL}p).*x265" $JUNK/"$OUTPUT.links" && echo -e "\\n${PIXEL}p x265\\n$(grep -iE "$TAG.*($PIXEL|${PIXEL}p).*x265" $JUNK/"$OUTPUT.links")" >> $JUNK/"$OUTPUT.link" || true
            continue
        done
        D=$((D+1))
    done
    mv $JUNK/"$OUTPUT.link" $JUNK/"$OUTPUT.links"
exit
set -xe
}
CROSS_CHECK(){
    DELETE_WP_POST(){
        curl -s -X DELETE --user "looneytkp:Sgm4kv101413$" "https://series.turbodl.xyz/wp-json/wp/v2/posts/$(jq ".[$A].id" $JUNK/"$OUTPUT.wp_results")" 2> /dev/null
        curl -s -X DELETE --user "looneytkp:Sgm4kv101413$" "https://series.turbodl.xyz/wp-json/wp/v2/media/$(jq ".[$A].featured_media" $JUNK/"$OUTPUT.wp_results")?force=true" 2> /dev/null
    }
    A=0
    curl $ARGS -X GET "https://series.turbodl.xyz/wp-json/wp/v2/posts?search=$(sed 's/[(-)]//g; s/ /%20/g' <<< "$TITLE")&per_page=4" | jq . > $JUNK/"$OUTPUT.wp_results"
    while [[ "$A" != $(jq length $JUNK/"$OUTPUT.wp_results") ]]; do
        if grep "$(sed 's/ (.*)//' <<< "$TITLE")" <<< "$(jq -r ".[$A].title.rendered" $JUNK/"$OUTPUT.wp_results" | sed "s/&#8211;/-/g; s/&#8217;/'/g; s/&#038;/\&/g; s/&#8216;/'/g; s/&#822[0-1];/\"/g; s/&amp;/\&/g; s/&#8230;/\.\.\./; s/.u2013/–/; s/.u00e9/é/;")"; then
            jq -r ".[$A].content.rendered" $JUNK/"$OUTPUT.wp_results" | grep -o '<a href.*</a>' | sed "s/&#8217;/'/g; s/&#8211;/-/g; s/&#8230;/\.\.\./g; /Whatsapp/d; /Telegram/d; /Tutorials/d" > $JUNK/"$OUTPUT.wp_links" || true
            if grep -q 'http' $JUNK/"$OUTPUT.wp_links"; then
                grep -o '<a.*http.*a>' $JUNK/"$OUTPUT.links" | sort -n > $JUNK/"$OUTPUT.two" && sort -n $JUNK/"$OUTPUT.wp_links" > $JUNK/"$OUTPUT.one"
                if cmp $JUNK/"$OUTPUT.one" $JUNK/"$OUTPUT.two"; then
                    echo 'no need to update'; return 1
                else
                    if [ "$USER" == "$SERVER" ]; then DELETE_WP_POST; fi; echo "deleted $OUTPUT"
                fi
            fi
        else
            A=$((A+1)); continue
        fi
        break
    done
    if [ $(jq length $JUNK/"$OUTPUT.wp_results") == 0 ] || ! grep -q "$TITLE" <<< "$(sed "s/&#8211;/-/g; s/&#8217;/'/g; s/&#038;/\&/g; s/&#8216;/'/g; s/&#822[0-1];/\"/g; s/&amp;/\&/g; s/&#8230;/\.\.\./; s/.u2013/–/; s/.u00e9/é/;" $JUNK/"$OUTPUT.wp_results")"; then
        sed -i "/$TITLE/d" $LIST
    fi
}
FUNC(){
    BLACKLIST=$(jq '.[0].blacklist' list); WHITELIST=$(jq '.[0].whitelist' list)
    exec 3>&1 4>&2; trap 'exec 2>&4 1>&3' 0 1 2 3; exec 1>"logs/$OUTPUT.log" 2>&1
    unset NAME TMDB_API POSTER TMDB_ID TRAILERS KEY IMDB_ID OMDB_API TITLE CAST GENRE RATING PLOT SAME TYPE
    set -xe; echo -e "\\n${OUTPUT}${TASKS}\\n-----------------------"
    if grep -q "$OUTPUT" <<< $BLACKLIST; then echo "$OUTPUT -- blacklisted" >> stoday.txt; return; fi #blaclist if title is in blacklist file
    curl $ARGS $(grep "$OUTPUT" "$JUNK/main" | grep -o http.*html) > "$JUNK/$OUTPUT.site" || exit #download series page
    grep -oiE "<a href=.*(S[0-9][0-9]E[0-9][0-9]).*(mkv|mp4|avi).*</a>" "$JUNK/$OUTPUT.site" | sed 's:(twitchdl.com)::;s:</a>:(turbodl.xyz)</a>:g; /imdb/d; s:<br />:\n:g; s:" .*">::g;' > "$JUNK/$OUTPUT.links"
    sed -i '/subtitle/d; s:<.*span.*span>::g; /^<span/d' "$JUNK/$OUTPUT.links" #get links and remove junk from links & add 'turbodl.xyz' to the end of links without it
    [ -z "$JUNK/$OUTPUT.links" ] && echo "$OUTPUT -- no links" >> stoday.txt && continue || grep -qE "(hd.*cm|HDCAM|HDCam|CAM|HDTS|HDTC|DVD|dvd|SCR|Scr|scr).*(mkv|mp4|avi)" "$JUNK/$OUTPUT.links" && echo '$OUTPUT is CAM' && continue #remove movies containing CAM like links
    NAME=$(sed "s: -.*Season.*::" <<< "$OUTPUT")
    grep -q "$OUTPUT=" <<< $WHITELIST && NAME=$(sed "/$OUTPUT/!d; s/.*$OUTPUT=//; s/\".*//")
    TMDB_API=$(curl $ARGS -H "Accept: application/json" -H "Content-Type: application/json" "https://api.themoviedb.org/3/search/tv?api_key=0dec8436bb1b7de2bbcb1920ac31111f&query=$(sed "s/ /%20/g" <<< "$NAME")&page=1" || exit)
    if [ $(jq '.total_results' <<< "$TMDB_API") == 0 ]; then echo "$OUTPUT -- not found" >> stoday.txt; continue; fi
    if [ $(jq -r ".results[0] | .poster_path" <<< "$TMDB_API") != 'null' ]; then
        TMDB_ID=$(jq -r ".results[0] | .id" <<< ""$TMDB_API"")
        POSTER="https://image.tmdb.org/t/p/w500$(jq -r ".results[0] | .poster_path" <<< "$TMDB_API")"
    else
        echo "$OUTPUT -- no poster" >> stoday.txt && return
    fi
    TRAILER(){
        GET_TRAILER(){
            while [ $A != $(jq '.results | length' <<< "$TRAILERS") ]; do
                if [ $1 == "$(jq -r ".results[$A].type" <<< "$TRAILERS")" ]; then
                    KEY=$(jq -r ".results[$A].key" <<< "$TRAILERS"); export KEY; break
                elif [ $A == $(jq '.results | length' <<< "$TRAILERS") ]; then
                    break
                else
                    A=$((A+1)); continue
                fi
            done
        }
        set +xe
        TRAILERS=$(curl $ARGS -H "Accept: application/json" -H "Content-Type: application/json" "https://api.themoviedb.org/3/tv/$TMDB_ID/videos?api_key=0dec8436bb1b7de2bbcb1920ac31111f" || exit)
        if [ "$(jq '.results | length' <<< $TRAILERS)" != '0' ]; then
            _TYPES=(Trailer Teaser Featurette)
            for _TYPE in "${_TYPES[@]}"; do A=0; GET_TRAILER $_TYPE; if [ $KEY ]; then break; fi; done
        fi
        set -xe
    }
    TRAILER &
    IMDB_ID=$(curl $ARGS --header "Content-Type: application/json" --header "trakt-api-version: 2" --header "trakt-api-key: 64ba02e985f18ec3a00186209b3605cfbbeedf9890898e3a06b8e020111e8194" "https://api.trakt.tv/search/tmdb/$TMDB_ID?type=show" | jq -r ".[0].show.ids.imdb")
    ! grep -q 'tt' <<< "$IMDB_ID" && echo "$OUTPUT -- false trakt API response" >> stoday.txt && return
    OMDB_API=$(curl --connect-timeout 5 --max-time 10 --retry 5 --retry-delay 0 --retry-max-time 40 -s -H "Accept: application/json" -H "Content-Type: application/json" "http://www.omdbapi.com/?i=$IMDB_ID&plot=short&apikey=7759dbc7" || exit)
    grep "Error getting data" <<< "$OMDB_API" && echo "$OUTPUT -- false OMDB API response" >> stoday.txt && return
    YEAR=$(jq -r '.Year' <<< $OMDB_API); TITLE="$(jq -r ".Title" <<< "$OMDB_API") ($YEAR)"
    CAST=$(jq -r '.Actors' <<< "$OMDB_API"); GENRE=$(jq -r '.Genre' <<< "$OMDB_API")
    RATING=$(jq -r '.imdbRating' <<< "$OMDB_API"); PLOT=$(jq -r '.Plot' <<< "$OMDB_API")
    grep -qiE '(documentary|reality-tv|talk-show)' <<< "$GENRE" && ! grep -q "$OUTPUT" <<< $WHITELIST && return
    if ! grep -q "$OUTPUT" <<< $WHITELIST; then if [ "$GENRE" == 'N/A' ]; then echo "$OUTPUT -- N/A" >> stoday.txt && return; fi; fi
    grep -owF "$TITLE" series_list && CROSS_CHECK; PARSE
    #sed 's/–/, /'

}
start=`date +%s`
ARGS='--connect-timeout 5 --max-time 10 --retry 5 --retry-delay 0 --retry-max-time 40 -ks'; SERVER="root"; LOCAL="persie"
DIR=~/.turbodl; PIXELS=(480 720 1080 2160);
mkdir -p $DIR/movies $DIR/series $DIR/logs $DIR/junk; cd "$DIR"; JUNK=junk
find . ! -name '*list' ! -name 'md5' -type f -exec rm -rf {} +
if [ "$USER" == "$SERVER" ]; then cat ~/turbodl/list > $DIR/list; else cat ~/git/turbodl/list > $DIR/list; fi
printf %b ":: working...\\r"
case "$1" in
    '') exit;;
    -l|--lightdl)
        shift; echo -e "https://www.lightdl.xyz" > $JUNK/url
        for PARAM; do grep ^'%' <<< "$PARAM" | sed 's/%/^/' >> $JUNK/pattern; done;;
    -t|--twitchdl)
        shift; echo -e "https://dl.twitchdl.us" > $JUNK/url
        for PARAM; do grep ^'%' <<< "$PARAM" | sed 's/%/^/' >> $JUNK/pattern; done;;
    -u|--url)
        shift
        for PARAM; do grep 'http' <<< "$PARAM" >> $JUNK/url || grep ^'%' <<< "$PARAM" | sed 's/%/^/' >> $JUNK/pattern; done;;
    *)  exit;;
esac
( while IFS= read -r "U"; do
    curl $ARGS "$U" | grep -oE "https.*html.*(|title).*</a>" | sed 's:</a>:\n:g; /Releases/d; /Movies/d; /jpg/d; /Series/d; /List/d; /Read More/d; /GAME OF THRONES/d; /gfn/d; /COVID-19/d' > "$JUNK/main" || exit
    sed '/search/d; /^$/d' $JUNK/main | grep -n . > $JUNK/mains; mv $JUNK/mains $JUNK/main
    if [ -e $JUNK/pattern ]; then
        output=$(grep -w -f $JUNK/pattern $JUNK/main | sed "s:.*>::; s: - SEASON.*::")
    else
        output=$(sed "s:.*>::; s: - SEASON.*::" "$JUNK/main")
    fi
    ( while IFS= read -r "OUTPUT"; do
        FUNC &
        echo "$!" >> "$JUNK/pid"
    done <<< $output ) &
    echo "$!" >> "$JUNK/pid"
done < $JUNK/url ) &
echo "$!" >> "$JUNK/pid"
while grep -owq -f "$JUNK/pid" <<< $(ls /proc); do printf %b ":: working...\\r"; done
echo -e ":: working...done!"
end=`date +%s`
runtime=$(echo -e "$end - $start" | bc -l)
echo -e ":: $runtime seconds"
#for series
#curl --connect-timeout 5 --max-time 10 --retry 5 --retry-delay 0 --retry-max-time 40 -s --header "Content-Type: application/json" 'https://eztv.io/api/get-torrents?imdb_id=6048596' | jq .
#for movies
#curl --connect-timeout 5 --max-time 10 --retry 5 --retry-delay 0 --retry-max-time 40 -s --header "Content-Type: application/json" 'https://yts.mx/api/v2/list_movies.json?query_term=tt1502397' | jq .
#magnet:?xt=urn:btih:
