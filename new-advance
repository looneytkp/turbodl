#!/bin/env bash
CROSS_CHECK(){
    DELETE_WP_POST(){
        curl -s -X DELETE --user "looneytkp:Sgm4kv101413$" "https://series.turbodl.xyz/wp-json/wp/v2/posts/$(jq ".[$A].id" WP_RESULTS)" 2> /dev/null
        curl -s -X DELETE --user "looneytkp:Sgm4kv101413$" "https://series.turbodl.xyz/wp-json/wp/v2/media/$(jq ".[$A].featured_media" WP_RESULTS)?force=true" 2> /dev/null
    }
    A=0
    curl $ARGS -X GET "https://series.turbodl.xyz/wp-json/wp/v2/posts?search=$(sed 's/[(-)]//g; s/ /%20/g' <<< "$TITLE")&per_page=4" > WP_RESULTS
    while [[ "$A" != $(jq length WP_RESULTS) ]]; do
        if grep "$(sed 's/ (.*)//' <<< "$TITLE")" <<< "$(jq -r ".[$A].title.rendered" WP_RESULTS | sed "s/&#8211;/-/g; s/&#8217;/'/g; s/&#038;/\&/g; s/&#8216;/'/g; s/&#822[0-1];/\"/g; s/&amp;/\&/g; s/&#8230;/\.\.\./; s/.u2013/–/; s/.u00e9/é/;")"; then
            jq -r ".[$A].content.rendered" WP_RESULTS | grep -o '<a href.*</a>' | sed "s/&#8217;/'/g; s/&#8211;/-/g; s/&#8230;/\.\.\./g; /Whatsapp/d; /Telegram/d; /Tutorials/d" > WP_LINKS || true
            if grep -q 'http' WP_LINKS; then
                grep -o '<a.*http.*a>' links | sort -n > two && sort -n WP_LINKS > one
                if cmp one two; then
                    #SAME='1'; export SAME; return
                    continue 2
                else
                    if [ "$USER" == '' ]; then DELETE_WP_POST; fi
                    echo "deleted $OUTPUT"
                fi
            fi
        fi
        break
    done
    if [ $(jq length WP_RESULTS) == 0 ] || ! grep -q "$TITLE" <<< "$(sed "s/&#8211;/-/g; s/&#8217;/'/g; s/&#038;/\&/g; s/&#8216;/'/g; s/&#822[0-1];/\"/g; s/&amp;/\&/g; s/&#8230;/\.\.\./; s/.u2013/–/; s/.u00e9/é/;" WP_RESULTS)"; then
        sed -i "/$TITLE/d" $LIST
    fi
    exit
}
FUNC(){
    BLACKLIST=$(jq '.[0].blacklist' list); WHITELIST=$(jq '.[0].whitelist' list)
    exec 3>&1 4>&2; trap 'exec 2>&4 1>&3' 0 1 2 3; exec 1>"logs/$OUTPUT.log" 2>&1
    unset NAME TMDB_API POSTER TMDB_ID TRAILERS KEY IMDB_ID OMDB_API TITLE CAST GENRE RATING PLOT SAME TYPE
    set -xe; echo -e "\\n${OUTPUT}${TASKS}\\n-----------------------"
    if grep -q "$OUTPUT" <<< $BLACKLIST; then echo "$OUTPUT -- blacklisted" >> stoday.txt; return; fi #blaclist if title is in blacklist file
    curl $ARGS $(grep "$OUTPUT" "$JUNK/twitchdl" | grep -o http.*html) > "$JUNK/$OUTPUT.site" || exit #download series page
    grep -oiE "<a href=.*(S[0-9][0-9]E[0-9][0-9]).*(mkv|mp4|avi).*</a>" "$JUNK/$OUTPUT.site" | sed 's:(twitchdl.com)::;s:</a>:(turbodl.xyz)</a>:g; /imdb/d; s:<br />:\n:g; s:" .*">::g;' > "$JUNK/$OUTPUT.links"
    sed -i '/subtitle/d; s:<.*span.*span>::g; /^<span/d' "$JUNK/$OUTPUT.links" #get links and remove junk from links & add 'turbodl.xyz' to the end of links without it
    [ -z "$JUNK/$OUTPUT.links" ] && echo "$OUTPUT -- no links" >> stoday.txt && continue || grep -qE "(hd.*cm|HDCAM|HDCam|CAM|HDTS|HDTC|DVD|dvd|SCR|Scr|scr).*(mkv|mp4|avi)" "$JUNK/$OUTPUT.links" && echo '$OUTPUT is CAM' && continue #remove movies containing CAM like links
    NAME=$(sed "s: -.*Season.*::" <<< "$OUTPUT")
    grep -q "$OUTPUT=" $WHITELIST && NAME=$(sed "/$OUTPUT/!d; s/.*$OUTPUT=//; s/\".*//")
    TMDB_API=$(curl $ARGS -H "Accept: application/json" -H "Content-Type: application/json" "https://api.themoviedb.org/3/search/tv?api_key=0dec8436bb1b7de2bbcb1920ac31111f&query=$(sed "s/ /%20/g" <<< "$NAME")&page=1" || exit)
    if [ $(jq '.total_results' <<< "$TMDB_API") == 0 ]; then echo "$OUTPUT -- not found" >> stoday.txt; continue; fi
    if [ $(jq -r ".results[0] | .poster_path" <<< "$TMDB_API") != 'null' ]; then
        TMDB_ID=$(jq -r ".results[0] | .id" <<< ""$TMDB_API"")
        POSTER="https://image.tmdb.org/t/p/w500$(jq -r ".results[0] | .poster_path" <<< "$TMDB_API")"
    else
        echo "$OUTPUT -- no poster" >> stoday.txt && return
    fi
    TRAILER(){
        GET_TRAILER(){
            while [ $A != $(jq '.results | length' <<< "$TRAILERS") ]; do
                if [ $1 == "$(jq -r ".results[$A].type" <<< "$TRAILERS")" ]; then
                    KEY=$(jq -r ".results[$A].key" <<< "$TRAILERS"); export KEY; break
                elif [ $A == $(jq '.results | length' <<< "$TRAILERS") ]; then
                    break
                else
                    A=$((A+1)); continue
                fi
            done
        }
        set +xe
        TRAILERS=$(curl $ARGS -H "Accept: application/json" -H "Content-Type: application/json" "https://api.themoviedb.org/3/tv/$TMDB_ID/videos?api_key=0dec8436bb1b7de2bbcb1920ac31111f" || exit)
        if [ "$(jq '.results | length' <<< $TRAILERS)" != '0' ]; then
            _TYPES=(Trailer Teaser Featurette)
            for _TYPE in "${_TYPES[@]}"; do A=0; GET_TRAILER $_TYPE; if [ $KEY ]; then break; fi; done
        fi
        set -xe
    }
    TRAILER &
    IMDB_ID=$(curl $ARGS --header "Content-Type: application/json" --header "trakt-api-version: 2" --header "trakt-api-key: 64ba02e985f18ec3a00186209b3605cfbbeedf9890898e3a06b8e020111e8194" "https://api.trakt.tv/search/tmdb/$TMDB_ID?type=show" | jq -r ".[0].show.ids.imdb")
    ! grep -q 'tt' <<< "$IMDB_ID" && echo "$OUTPUT -- false trakt API response" >> stoday.txt && return
    ( curl $ARGS --header "Content-Type: application/json" "https://eztv.io/api/get-torrents?imdb_id=" | jq . > "$JUNK/$OUTPUT.tor" ) &
    # error code for EZTV
    OMDB_API=$(curl --connect-timeout 5 --max-time 10 --retry 5 --retry-delay 0 --retry-max-time 40 -s -H "Accept: application/json" -H "Content-Type: application/json" "http://www.omdbapi.com/?i=$IMDB_ID&plot=short&apikey=7759dbc7" || exit)
    grep "Error getting data" <<< "$OMDB_API" && echo "$OUTPUT -- false OMDB API response" >> stoday.txt && return
    YEAR=$(jq -r '.Year' <<< $OMDB_API); TITLE="$(jq -r ".Title" <<< "$OMDB_API") ($YEAR)"
    CAST=$(jq -r '.Actors' <<< "$OMDB_API"); GENRE=$(jq -r '.Genre' <<< "$OMDB_API")
    RATING=$(jq -r '.imdbRating' <<< "$OMDB_API"); PLOT=$(jq -r '.Plot' <<< "$OMDB_API")
    grep -qiE '(documentary|reality-tv|talk-show)' <<< "$GENRE" && ! grep -q "$OUTPUT" $WHITELIST && return
    if ! grep -q "$OUTPUT" $WHITELIST; then
        if [ "$GENRE" == 'N/A' ]; then echo "$OUTPUT -- N/A" >> stoday.txt && return; fi
    fi
    #grep -owF "$TITLE" series_list && CROSS_CHECK; break
    echo "$TITLE" >> today.txt;
    #sed 's/–/, /'

}
ARGS='--connect-timeout 5 --max-time 10 --retry 5 --retry-delay 0 --retry-max-time 40 -ks'
DIR=~/.turbodl; PIXELS=(480 720 1080 2160)
mkdir -p $DIR/movies $DIR/series $DIR/logs $DIR/junk; cd "$DIR"; JUNK=junk
#find . ! -name 'main' ! -name '*list' ! -name 'md5' -type f -exec rm -rf {} +
find . ! -name '*list' ! -name 'md5' -type f -exec rm -rf {} +
set -x
if [ "$USER" == root ]; then cat ~/turbodl/list > $DIR/list; else cat ~/git/turbodl/list > $DIR/list; fi
for parameter; do
    case "$paramter" in
        '') exit;;
        -l|--lightdl)  echo -e "https://www.lightdl.xyz" >> $DIR/url;;
        -t|--twitchdl) echo -e "https://dl.twitchdl.us/" >> $DIR/url;;
        *)  exit;;
    esac
done
exit
printf %b ":: working...\\r";
( while IFS= read -r "U"; do
    #curl $ARGS "$U" | grep -oE "https.*html.*(|title).*</a>" | sed 's:</a>:\n:g; /Releases/d; /Movies/d; /jpg/d; /Series/d; /List/d; /Read More/d; /GAME OF THRONES/d; /gfn/d; /COVID-19/d' >> "$JUNK/main" || exit
    sed -i '/search/d' "$JUNK/main"
    output=$(sed "s:.*>::; s: - SEASON.*::" "$JUNK/main"); output2=$(sed "s:>.*::; s:'.*::" "$JUNK/main")
    #( while IFS= read -r "OUTPUT"; do
    #    FUNC &
    #    echo "$!" >> "$JUNK/pid"
    #done <<< $output ) &
    #echo "$!" >> "$JUNK/pid"
done < $DIR/url ) &
echo "$!" >> "$JUNK/pid"
while grep -owq -f "$JUNK/pid" <<< $(ls /proc); do printf %b ":: working...\\r"; done
echo -e ":: working...done!"

#for series
#curl --connect-timeout 5 --max-time 10 --retry 5 --retry-delay 0 --retry-max-time 40 -s --header "Content-Type: application/json" 'https://eztv.io/api/get-torrents?imdb_id=6048596' | jq .
#for movies
#curl --connect-timeout 5 --max-time 10 --retry 5 --retry-delay 0 --retry-max-time 40 -s --header "Content-Type: application/json" 'https://yts.mx/api/v2/list_movies.json?query_term=tt1502397' | jq .
#magnet:?xt=urn:btih:
