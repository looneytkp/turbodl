#!/bin/env bash
DIR=~/.turbodl
ARGS='--connect-timeout 5 --max-time 10 --retry 5 --retry-delay 0 --retry-max-time 40 -s'
PIXELS=(480p 720p 1080p 2160p)
if [ ! -d "$DIR" ]; then
    mkdir -p "$DIR"/movies "$DIR"/series $DIR/errors; cd "$DIR"
else
    cd "$DIR"
    mkdir -p movies series errors
    rm *s/* *today.txt titles.txt *logs.txt links 2> /dev/null
fi
BLACKLIST(){
    if [ "$USER" == '' ]; then
        echo "$OUTPUT;" >> blacklist; git stash
    elif [ "$USER" == 'persie' ]
        (cd ~/git/turbodl; echo "$OUTPUT;" >> blacklist; git add blacklist; git commit -m 'updated blacklist')
    fi
}
PARSE(){
set +x
    touch links; D=1
    while true; do
        if [ $D -gt 9 ]; then TAG="s$D"; else TAG="S0$D"; fi
        if ! grep -q "$TAG" <<< "$LINKS"; then break; fi
        if ! grep -qi "Season $D" links; then echo -e "<h1>Season $D</h1>" >> links; fi
        for PIXEL in "${PIXELS[@]}"; do
            grep -i "$TAG" <<< "$LINKS" | grep -vE '(480p|720p|1080p|2160p)' >> links || true
            grep -qi "$TAG.*$PIXEL" <<< "$LINKS" && echo -e "\\n$PIXEL\\n$(grep -i "$TAG.*$PIXEL" <<< "$LINKS")" >> links
            continue
        done
        D=$((D+1))
    done
set -x
}
GET_SIZES(){
set +x
    if [ -e links ]; then rm links; fi
    if [ "$1" == s ]; then echo "$LINKZ" > links; fi
    if [ $COLLECTION ]; then LINKZ="$LINKS"; fi
    while IFS= read -r "LINE"; do
        if [ "$1" == s ]; then if ! grep -q 'http' <<< $LINE; then continue; fi; fi
        SIZE=$(wget -o - -t 5 --timeout=5 --tries=3 --spider "$(grep -oE "http.*(mkv|mp4|avi)" <<< $LINE | sed -e 's/.>.*//')" | grep Length | sed 's/.*(//; s/).*//' || true)
        if grep -qE "(G|M)" <<< $SIZE; then
            if [ "$1" == s ]; then sed -i 's|'"$LINE"'|'"$LINE"' - '"${SIZE}B"'|' links; continue; fi
            echo "$LINE - $SIZE"B >> links
        else
            if [ "$1" == s ]; then sed -i 's|'"$LINE"'|'"$LINE"'|' links; continue; fi
            echo "$LINE" >> links
        fi
    done <<< "$LINKZ"
    if [ "$1" == m ]; then
        grep . links | grep -vE '(480p|720p|1080p|2160p)' >> links2 || true
        for PIXEL in "${PIXELS[@]}"; do
            if grep -q "$PIXEL" links; then echo -e "\\n$PIXEL\\n$(grep "$PIXEL" links)" >> links2; fi
        done
        if [ -e links2 ]; then mv links2 links; fi
    fi
set -x
}
UPDATE_POSTS_DATABASE(){
    RUN(){
        COUNT=1; COUNT1=0
        echo '---script starts above this---' > $FILE
        while true; do
            POSTS=$(curl -s -X GET "$URL=$COUNT&per_page=100")
            if grep -q 'rest_post_invalid_page_number' <<< "$POSTS"; then break; fi
            while [ $COUNT1 -lt 100 ]; do
                title=$(jq -r ".[$COUNT1].title.rendered" <<< "$POSTS" | sed -e "s/&#8211;/-/g; s/&#8217;/'/g; s/&#038;/\&/g; s/&#8216;/'/g; s/&#822[0-1];/\"/g; s/&amp;/\&/g")
                if [ "$title" == null ]; then break; fi
                echo "$title" >> $FILE; COUNT1=$((COUNT1+1))
            done
            COUNT1=0; COUNT=$((COUNT+1))
        done
    }
    case "$1" in
        -A) FILE=~/.turbodl/movie_list.txt; URL="https://turbodl.xyz/wp-json/wp/v2/posts?page"
            printf ':: updating movie database...'; RUN; echo 'done!'
            FILE=~/.turbodl/series_list.txt; URL="https://series.turbodl.xyz/wp-json/wp/v2/posts?page"
            printf ':: updating series database...'; RUN; echo 'done!';;
        -M) FILE=~/.turbodl/movie_list.txt; URL="https://turbodl.xyz/wp-json/wp/v2/posts?page"
            printf ':: updating movie database...'; RUN; echo 'done!';;
        -S) FILE=~/.turbodl/series_list.txt; URL="https://series.turbodl.xyz/wp-json/wp/v2/posts?page"
            printf ':: updating series database...'; RUN; echo 'done!';;
    esac
}
WRITE_TO_FILE(){
    if [[ $1 == S ]]; then
        FOLDER='series'
        #GET_SIZES s
    elif [[ $1 == M ]]; then
        FOLDER='movies'
        GET_SIZES m
    else
        FOLDER=errors
    fi
    if [ $1 == M ]; then LINKZ=$(cat links); fi
    if [ "$KEY" ]; then
        echo -e "<p style=\"text-align: center;\">\\n$PLOT\\n\\n<center>Trailer:\\n<iframe src=\"https://www.youtube.com/embed/$KEY?modestbranding=1&showinfo=0&rel=0&iv_load_policy=3&color=white&controls=0\" width=\"500\" height=\"300\" frameborder=\"0\"></iframe></centre></p>\\n\\n<p style=\"text-align: center;\">IMDB Rating: $RATING\\nCast: $CAST\\nGenre: $GENRE</p>\\n\\n<p style=\"text-align: center;\">Download Links:\\n$LINKZ\\n</p>\\n\\nTags: $GENRE, $Y" > $FOLDER/"$OUTPUT".txt
    else
        echo -e "<p style=\"text-align: center;\">\\n$PLOT</p>\\n\\n<p style=\"text-align: center;\">IMDB Rating: $RATING\\nCast: $CAST\\nGenre: $GENRE</p>\\n\\n<p style=\"text-align: center;\">Download Links:\\n$LINKZ\\n</p>\\n\\nTags: $GENRE, $Y" > $FOLDER/"$OUTPUT".txt
    fi
    mv "$TITLE".jpg $FOLDER/"$TITLE".jpg
}
CROSS_CHECK(){
    DELETE_WP_POST(){
        curl -s -X DELETE --user "looneytkp:Sgm4kv101413$" "https://$R.xyz/wp-json/wp/v2/posts/$(jq ".[$A].id" <<< "$WP_RESULTS")" 2> /dev/null
        curl -s -X DELETE --user "looneytkp:Sgm4kv101413$" "https://$R.xyz/wp-json/wp/v2/media/$(jq ".[$A].featured_media" <<< "$WP_RESULTS")?force=true" 2> /dev/null
    }
    A=0
    WP_RESULTS=$(curl $ARGS -X GET "https://$SITE/wp-json/wp/v2/posts?search=$(sed 's/[(-)]//g; s/ /%20/g' <<< "$TITLE")&per_page=$NUM")
    while [[ "$A" != $(jq length <<< "$WP_RESULTS") ]]; do
        if grep "$(sed 's/ (.*)//' <<< "$TITLE")" <<< "$(jq -r ".[$A].title.rendered" <<< "$WP_RESULTS" | sed -e "s/&#8211;/-/g; s/&#8217;/'/g; s/&#038;/\&/g; s/&#8216;/'/g; s/&#822[0-1];/\"/g; s/&amp;/\&/g")"; then
            WP_LINKS=$(jq -r ".[$A].content.rendered" <<< "$WP_RESULTS" | grep -o '<a href.*</a>' | sed "s/&#8217;/'/g; s/&#8211;/-/g; s/&#8230;/\.\.\./g; s/nofollow noopener noreferrer/nofollow/" || true)
            if [ $1 == s ]; then R='series.turbodl'; else R='turbodl'; fi
            if grep -q 'http' <<< "$WP_LINKS"; then
                LINKS2=$(sed "s/<\/a>.*/<\/a>/; /CLICK HERE FOR SUBTITLES/d; /target.*self.*Load more/d" <<< "$LINKS")
                sort -n <<< "$WP_LINKS" > one && sort -n <<< "$LINKS2" > two
                if cmp -s one two; then
                    SAME=1 && export SAME; break
                else
                    if [ "$USER" == '' ]; then
set +x
                        DELETE_WP_POST
set -x
                    fi
                    echo "deleted $OUTPUT"
                fi
            else
                if [ "$USER" == '' ]; then
set +x
                    DELETE_WP_POST
set -x
                fi
                sed -i "/$TITLE/d" $LIST
                echo "deleted $OUTPUT"
            fi
            break
        else
            A=$((A+1))
            if [ $A == $(jq length <<< "$WP_RESULTS") ]; then
                if [ $NUM == 5 ]; then
                    NUM=20; CROSS_CHECK $1
                else
                    echo "$OUTPUT   -->   not published - $(jq length <<< "$WP_RESULTS") results" >> $1'today.txt'
                    if [ "$USER" == '' ]; then UPDATE_POSTS_DATABASE -A; fi
                    SAME=1 && export SAME && break
                fi
            fi
        fi
    done
    if [ $(jq length <<< "$WP_RESULTS") == 0 ]; then
        echo "$OUTPUT   -->   not published - $(jq length <<< "$WP_RESULTS") results" >> $1'today.txt'
        if [ "$USER" == '' ]; then bash ~/turbodl/tmp -a; fi
        SAME=1 && export SAME
    fi
    if [ -e one ]; then rm one; fi; if [ -e two ]; then rm two; fi
}
MULTI_FUNC(){
    output=$(grep ^'<a href=.*html.*title=.*</a>' <<< "$URL" | sed -e "s/'>.*//; s/.*title='//; s/<\/a>//")
    output2=$(grep ^'<a href=.*html.*title=.*</a>' <<< "$URL" | sed "s/'>.*//")
    exec 3>&1 4>&2
    trap 'exec 2>&4 1>&3' 0 1 2 3
    exec 1>$1'logs.txt' 2>&1
    while IFS= read -r "OUTPUT"; do
        unset COLLECTION
        if [ -e links ]; then rm links; fi
set -xe
        echo -e "\\n$OUTPUT\\n-----------------------"
#if [ "$OUTPUT" != "Hawaii Five-0" ]; then continue; fi
        if grep "$OUTPUT" blacklist; then echo "$OUTPUT blacklisted"; continue; fi
        if grep -i 'trailer' <<< "$OUTPUT"; then continue; fi
set +xe
        SITE=$(curl $ARGS $(grep "$OUTPUT" <<< "$output2" | grep -o http.*html) || exit)
set -xe
        LINKS=$(grep -oiE "(<span style=\"font-family.*http|<a href=).*(.*|S[0-9][0-9]E[0-9][0-9]).*(mkv|mp4|avi).*</a>" <<< "$SITE" | sed "s/.*<a/<a/; s/a>.*/a>/; s/CLICK HERE FOR SUBTITLES /Subtitles/; /Load more/d; /img/d")
        grep -qiE "(hd.*cm|HDCAM|CAM|HDTS).*(mkv|mp4|avi)" <<< "$LINKS" && continue
        YEAR=$(grep -woE '([0-9][0-9][0-9][0-9]$|[0-9][0-9][0-9][0-9])' <<< "$OUTPUT" || sed '0,/class=.*post-body/d; /CLICK ON.* LINK.* BELOW TO DOWNLOAD/,$d' <<< "$SITE" | grep -oE '(Release.*[0-9][0-9][0-9][0-9]|[0-9][0-9][0-9][0-9]<br />)' | grep -o '[0-9][0-9][0-9][0-9]' || echo 'null')
        if grep -q 'null' <<< "$YEAR"; then
            if grep -o "$OUTPUT" whitelist; then
                YEAR=$(grep -oiE "$OUTPUT.*#([0-9][0-9][0-9][0-9]|collection)" whitelist | sed 's/.*#//')
                if [ "$YEAR" == "Collection" ]; then unset YEAR; COLLECTION=YES; fi
            elif grep -qi 'collection' <<< $OUTPUT; then
                COLLECTION=YES
            else
                echo "$OUTPUT   -->   year not found" >> $1'today.txt' && continue
            fi
        fi
        if [ "$YEAR" -lt '2007' ]; then echo "$OUTPUT   -->   year less than 2007"; continue; fi
        NAME=$(sed -e 's/  $//; s/ $//; s/\./ /g; s/_/ /g; s/[ -.][0-9][0-9][0-9][0-9].*//; s/ ([0-9][0-9][0-9][0-9]).*//; s/ - Collection//; s/ Collection//; s/ (Tv-Series)//' <<< "$OUTPUT")
        if [[ $1 == s ]]; then N='tv'; else N='movie'; fi
if [ "$OUTPUT" == "Pirates of the Carribean - Collection" ]; then NAME='Pirates of the Caribbean'; fi
if [ "$OUTPUT" == 'Magum P.I' ]; then NAME='Magum PI'; fi
        TMDB_API=$(curl $ARGS -H "Accept: application/json" -H "Content-Type: application/json" "https://api.themoviedb.org/3/search/$N?api_key=0dec8436bb1b7de2bbcb1920ac31111f&query=$(sed "s/ /%20/g" <<< "$NAME")&page=1&year=$YEAR" || exit)
        if [ $(jq '.total_results' <<< "$TMDB_API") == 0 ]; then echo "$OUTPUT   -->   not found" >> $1'today.txt'; continue; fi
        if [[ $1 == s ]]; then F='first_air_date'; else F='release_date'; fi
        A=0
        while [ "$A" -lt "$(jq '.total_results' <<< $TMDB_API)" ]; do
            if grep -q "$YEAR" <<< $(jq -r ".results[$A].$F" <<< "$TMDB_API"); then
                POSTER="https://image.tmdb.org/t/p/w500$(jq -r ".results[$A] | .poster_path" <<< "$TMDB_API")"
                TMDB_ID=$(jq -r ".results[$A] | .id" <<< ""$TMDB_API"")
                OVERVIEW=$(jq -r ".results[$A] | .overview" <<< "$TMDB_API")
                break
            elif grep -q "$((YEAR+1))" <<< $(jq -r ".results[$A].$F" <<< "$TMDB_API"); then
                POSTER="https://image.tmdb.org/t/p/w500$(jq -r ".results[$A] | .poster_path" <<< "$TMDB_API")"
                TMDB_ID=$(jq -r ".results[$A] | .id" <<< ""$TMDB_API"")
                OVERVIEW=$(jq -r ".results[$A] | .overview" <<< "$TMDB_API")
                break
            else
                if [ $(jq '.total_results' <<< "$TMDB_API") == 1 ]; then
                    POSTER="https://image.tmdb.org/t/p/w500$(jq -r ".results[$A] | .poster_path" <<< "$TMDB_API")"
                    TMDB_ID=$(jq -r ".results[$A] | .id" <<< "$TMDB_API")
                    OVERVIEW=$(jq -r ".results[$A] | .overview" <<< "$TMDB_API")
                    break
                elif [ "$A" == $(jq '.total_results' <<< "$TMDB_API") ]; then
                    echo "$OUTPUT   -->   not found" >> $1'today.txt'
                    continue 2
                fi
                A=$((A+1))
            fi
        done
        A=0
        if [ ! $COLLECTION ]; then
            TRAILERS=$(curl $ARGS -H "Accept: application/json" -H "Content-Type: application/json" "https://api.themoviedb.org/3/$N/$TMDB_ID/videos?api_key=0dec8436bb1b7de2bbcb1920ac31111f" || exit)
            if [ "$(jq '.results | length' <<< $TRAILERS)" != '0' ]; then
                while [ $A != $(jq '.results | length' <<< "$TRAILERS") ]; do
                    if [ Trailer == "$(jq -r ".results[$A].type" <<< "$TRAILERS")" ]; then
                        KEY=$(jq -r ".results[$A].key" <<< "$TRAILERS")
                        break
                    elif [ $A == $(jq '.results | length' <<< "$TRAILERS") ]; then
                        unset KEY; break
                    else
                        A=$((A+1)); continue
                    fi
                done
            else
                unset KEY
            fi
        fi
        if [[ $1 == s ]]; then N='show'; else N='movie'; fi
        IMDB_ID=$(curl $ARGS --header "Content-Type: application/json" --header "trakt-api-version: 2" --header "trakt-api-key: 64ba02e985f18ec3a00186209b3605cfbbeedf9890898e3a06b8e020111e8194" "https://api.trakt.tv/search/tmdb/$TMDB_ID?type=$N" | jq -r ".[0].$N.ids.imdb")
        ! grep -q 'tt' <<< "$IMDB_ID" && echo "$OUTPUT   -->   false trakt API response" >> $1'today.txt' && XX=YES
        if [ "$XX" ]; then
            BLACKLIST; unset XX; continue
        fi
        OMDB_API=$(curl --connect-timeout 5 --max-time 10 --retry 5 --retry-delay 0 --retry-max-time 40 -s -H "Accept: application/json" -H "Content-Type: application/json" "http://www.omdbapi.com/?i=$IMDB_ID&plot=short&apikey=7759dbc7" || exit)
        grep "Error getting data" <<< "$OMDB_API" && echo "$OUTPUT   -->   false OMDB API response" >> $1'today.txt' && XX=YES
        if [ "$XX" ]; then
            BLACKLIST; unset XX; continue
        fi
        if [ $COLLECTION ]; then
            TITLE="$NAME – Collection"; GENRE='Collection'; unset KEY
            CAST=N/A; RATING=N/A; YEAR=''
        else
            YEAR=$(jq -r '.Year' <<< $OMDB_API)
            TITLE="$(jq -r ".Title" <<< "$OMDB_API") ($YEAR)"
            CAST=$(jq -r '.Actors' <<< "$OMDB_API"); GENRE=$(jq -r '.Genre' <<< "$OMDB_API")
            if grep -qiE '(documentary|reality-tv)' <<< "$GENRE"; then if ! grep -q "$OUTPUT" whitelist; then continue; fi; fi
            RATING=$(jq -r '.imdbRating' <<< "$OMDB_API")
        fi
        PLOT=$(jq -r '.Plot' <<< "$OMDB_API"); grep -q 'N/A' <<< "$PLOT" && PLOT="$OVERVIEW"
        if [[ $1 == s ]]; then PARSE; fi
        if [[ $1 == s ]]; then
            Y=$(sed 's/–/, /' <<< $YEAR); LINKZ=$(cat links)
        else
            Y="$YEAR"; LINKZ="$LINKS"
        fi
        curl $ARGS "$POSTER" -o "$TITLE".jpg || if [ ! -e "$TITLE.jpg" ]; then
            echo "$OUTPUT   -->   img not found" >>  $1'today.txt'
            BLACKLIST; continue
        fi
        if [ ! $COLLECTION ]; then
            if ! grep -q 'http' <<< "$LINKZ"; then
                WRITE_TO_FILE $1
                echo "$OUTPUT   -->   no links" >> $1'today.txt'
                BLACKLIST; continue
            fi
            if [ "$RATING" == 'N/A' -o "$GENRE" == 'N/A' ]; then
                if ! grep -q "$OUTPUT" whitelist; then
                    WRITE_TO_FILE $1
                    echo "$OUTPUT   -->   rating/genre N/A" >> $1'today.txt'
                    continue
                fi
            else
                if grep -qiE '(horror|thriller)' <<< "$GENRE"; then
                    if [ $(sed 's/\.//' <<< "$RATING") -lt 52 ] && ! grep -q "$OUTPUT" whitelist; then
                        rm "$TITLE".jpg; continue
                    fi
                else
                    if [ $(sed 's/\.//' <<< "$RATING") -lt 55 ] && ! grep -q "$OUTPUT" whitelist; then
                        rm "$TITLE".jpg; continue
                    fi
                fi
            fi
        fi
        if [[ $1 == s ]]; then
            LIST='series_list.txt'; SITE='series.turbodl.xyz'
        else
            LIST='movie_list.txt'; SITE='turbodl.xyz'
        fi
        if grep -owF "$TITLE" $LIST; then
            NUM=5; CROSS_CHECK $1
            if [ $INV ]; then unset INV && continue; fi
            if [ $SAME ]; then
                unset SAME && if [ -e "$TITLE".jpg ]; then rm "$TITLE".jpg; fi && continue
            fi
        fi
        if [ $(identify -format "%w" "$TITLE".jpg)> /dev/null -gt 530 -o $(identify -format "%w" "$TITLE".jpg)> /dev/null -lt 470 -o $(identify -format "%h" "$TITLE".jpg)> /dev/null -gt 780 -o $(identify -format "%h" "$TITLE".jpg)> /dev/null -lt 700 ]; then
            if ! grep -q "$OUTPUT" whitelist; then
                WRITE_TO_FILE $1
                echo "$OUTPUT   -->   image dimension error" >> $1'today.txt'
                continue
            fi
        fi
        if [ $1 == s ]; then WRITE_TO_FILE S; elif [ $1 == m ]; then WRITE_TO_FILE M; fi
        if grep -owF "$TITLE" $LIST; then
            echo "$OUTPUT   -->   updated" >> $1'today.txt'
        else
            echo "$OUTPUT" >> $1'today.txt' && sed -i "1s/^/$TITLE\\n/" $LIST
        fi
        if [ "$TITLE" == "9-1-1" ]; then TITLE='911'; fi
        echo "$TITLE %$OUTPUT".txt >> titles.txt
        unset COLLECTION
    done <<< "$output"
    if [ ! -e $1'today.txt' ]; then
        echo 'null posts'
    else
        if [ $1 == s ]; then TYPE='Series'; else TYPE='Movies'; fi
        sed -i "1s/^/\\n$TYPE - $(date)\\n-------------------------------------\\n/" $1'today.txt'
        if [ "$USER" == '' ]; then
            if [ -e titles.txt ]; then
                echo -e "\\n---sorting randomly---"
                SORTED_POSTS=$(sort -Rr < titles.txt)
                if [[ $1 == s ]]; then
                    MAIL='Ahd8s7a8a9skA@turbodl.xyz'
                else
                    MAIL='Ud37asAUd8a7@turbodl.xyz'
                fi
                if [ $1 == s ]; then FOLDER='series'; else FOLDER='movies'; fi
                while IFS= read -r SORTED; do
                    echo | mutt -s "$(sed "s/ %.*//" <<< "$SORTED")" -i $FOLDER/"$(grep -o '%.*' <<< "$SORTED" | sed 's/%//')" -a $FOLDER/"$(sed 's/ %.*//' <<< "$SORTED")".jpg -- $MAIL
                done <<< "$SORTED_POSTS"
                rm titles.txt
            fi
        fi
    fi
    echo "$(date)"
}
if [ "$USER" == '' ]; then
    cat ~/turbodl/whitelist > ~/.turbodl/whitelist
    cat ~/turbodl/blacklist > ~/.turbodl/blacklist
elif [ "$USER" == 'persie' ]; then
    cat ~/git/turbodl/whitelist > ~/.turbodl/whitelist
    cat ~/git/turbodl/blacklist > ~/.turbodl/blacklist
fi
case $1 in
    '')
        echo ':: no arguments, nothing to do';;
    -g)
        if [ "$USER" == '' ]; then (cd ~/turbodl/ && git pull); fi;;
    -m)
        URL=$(curl $ARGS "https://lightdlmovies.blogspot.com/search/label/MOVIES" || exit)
        MULTI_FUNC m;;
    -s)
        URL=$(curl $ARGS "https://www.lightdl.xyz/search/label/TV%20SERIES" || exit)
        MULTI_FUNC s;;
    -a)
        URL=$(curl $ARGS "https://lightdlmovies.blogspot.com/search/label/MOVIES" || exit)
        MULTI_FUNC m
set +xe
        URL=$(curl $ARGS "https://www.lightdl.xyz/search/label/TV%20SERIES" || exit)
        MULTI_FUNC s;;
    -M|-S|-A)
        UPDATE_POSTS_DATABASE "$1";;
    *)
        if grep -qi movies <<< "$1"; then
            URL=$(curl $ARGS "$1" || exit); MULTI_FUNC m
        elif grep -qi SERIES <<< "$1"; then
            URL=$(curl $ARGS "$1" || exit); MULTI_FUNC s
        else
            echo ":: invalid: $1"
        fi;;
esac
